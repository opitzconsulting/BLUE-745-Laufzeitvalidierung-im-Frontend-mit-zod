// Invoke using npx vite-node ./build-types.mts from the project root.

import { mkdirSync, readFileSync, rmSync, rmdirSync, writeFileSync } from "fs";
import { basename, join } from "path";
import { fileURLToPath } from "url";
import {globSync} from "glob"
import { jsonSchemaToZod } from "json-schema-to-zod";
import * as prettier from "prettier"
// First clear the generated types dir, located at `src/generated/zod`

const outFilePath = join(fileURLToPath(import.meta.url), "..", "src", "generated", "backendTypes.ts" )
rmSync(outFilePath, {recursive: true, force: true})


// Output

const inDir = join(fileURLToPath(import.meta.url), "..", "..", ..."zod-example-backend/src/main/resources/schemas".split("/"))
const jsonFiles = globSync(join(inDir, "**", "*DTO.json")) // We only care about the "top-level" Definitions. Our Convention has them with the DTO suffix


const zodifiedData = jsonFiles.map( e => ([basename(e).replace(".json", ""), jsonSchemaToZod(JSON.parse(readFileSync(e, "utf8")))]))

const moduleText = [
  "/* AUTOGENERATED FILE. DO NOT EDIT MANUALLY.*/",
  "/* Use npm run build-types. Assumes Backend is located at ../zod-example-backend */",
  "import {z} from 'zod';",
  ...zodifiedData.map( ([name, content]) => `export const ${name}Zod = ${content}; export type ${name} = z.infer<typeof ${name}Zod>;`)
].join("\n")

const prettyModuleText = await prettier.format(moduleText, {parser: "babel-ts"})

console.log(prettyModuleText)

mkdirSync(join(outFilePath, ".."), {recursive: true})
writeFileSync(outFilePath, prettyModuleText)

console.error("Done")
